@import 'variables';
@import 'functions';

// font style generator
@mixin font-style($style-name, $font-weight: '') {
  $font-style: map-get($font-styles, $style-name);

  line-height: map-get($font-style, line-height);
  font-size: map-get($font-style, font-size);

  @if $font-weight != '' {
    font-weight: map-get($font-weights, $font-weight);
  } @else {
    font-weight: map-get($font-style, font-weight);
  }

  $mobile-font-size: map-get($font-style, mobile-font-size);
  $mobile-line-height: map-get($font-style, mobile-line-height);

  @if $mobile-font-size != '' {
    @include md {
      font-size: $mobile-font-size;
      line-height: $mobile-line-height;
    }
  }
}

@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Input & Labels
@mixin base-label {
  @include font-style(base);

  color: $color-black;
  transition: transform 0.2s, font-size, 0.2s ease-out;
}

@mixin active-label {
  @include font-style(label);

  transform: translate(0, -24px);
}

@mixin base-input {
  @include font-style(input);

  width: auto;
  border: 2px solid $color-black-20;
  padding: 10px;
  box-sizing: border-box;
  min-height: 48px;
}

@mixin base-checkbox {
  appearance: none;
  width: 20px;
  height: 20px;
  border: 2px solid $color-black-30;
  background-color: $color-white;
  margin: 0;
}

@mixin base-checkbox-checked {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    background: url('../../images/checkbox-selected.svg') no-repeat center;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    border-radius: 100%;
  }
}

@mixin base-radio-button {
  $size: 16px;

  appearance: none;
  margin: 2px 0 0;
  width: $size;
  height: $size;
  border: calc($size / 8) solid $color-black-30;
  border-radius: 100%;
  padding: calc($size / 8);
  cursor: pointer;

  &::after {
    content: '';
    width: 100%;
    height: 100%;
    background-color: $color-black-solid;
    border-radius: 100%;
    display: none;
  }
}

@mixin toggleBackground {
  background-image: url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m6 10 6 6 6-6' stroke='%23222' stroke-width='2' fill='none' fill-rule='evenodd' stroke-linecap='square'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position-x: calc(100% - 10px);
  background-position-y: 50%;
  height: 100%;
  padding: 0 34px 0 10px;
  display: flex;
  align-items: center;
  appearance: none; /* Remove default arrow */
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  background-color: $color-white;
  user-select: none;
}

// Breakpoints
@mixin xs {
  @media only screen and (max-width: $screen-xs) {
    @content;
  }
}

@mixin min-xs {
  @media only screen and (min-width: $screen-xs) {
    @content;
  }
}

@mixin sm {
  @media only screen and (max-width: $screen-sm) {
    @content;
  }
}

@mixin min-sm {
  @media only screen and (min-width: $screen-sm) {
    @content;
  }
}

@mixin md {
  @media only screen and (max-width: $screen-md) {
    @content;
  }
}

@mixin min-md {
  @media only screen and (min-width: $screen-md) {
    @content;
  }
}

@mixin lg {
  @media only screen and (max-width: $screen-lg) {
    @content;
  }
}

@mixin min-lg {
  @media only screen and (min-width: $screen-lg) {
    @content;
  }
}

@mixin xl {
  @media only screen and (max-width: $screen-xl) {
    @content;
  }
}

@mixin min-xl {
  @media only screen and (min-width: $screen-xl) {
    @content;
  }
}

@mixin xxl {
  @media only screen and (max-width: $screen-xxl) {
    @content;
  }
}

@mixin min-xxl {
  @media only screen and (min-width: $screen-xxl) {
    @content;
  }
}

@mixin breakpoint($screen) {
  @media only screen and (max-width: #{$screen+'0px'}) {
    @content;
  }
}

@mixin scrollable($color: $color-black-20, $width: 3px) {
  overflow-y: overlay;
  background: $color-white;

  &::-webkit-scrollbar {
    width: $width;
  }

  &::-webkit-scrollbar-thumb {
    background: $color;
  }

  &::-webkit-scrollbar-track {
    background-color: transparent;
  }
}

@mixin icon-button {
  background: transparent;
  border: none;
  margin: 0;
  padding: 0;
}

@mixin link-button {
  @include icon-button;
  @include font-style(base);

  cursor: pointer;
}

// Content layout
@mixin mx($m) {
  margin-left: $m;
  margin-right: $m;
}

@mixin my($m) {
  margin-bottom: $m;
  margin-top: $m;
}

@mixin px($p) {
  padding-left: $p;
  padding-right: $p;
}

@mixin py($p) {
  padding-bottom: $p;
  padding-top: $p;
}

/**
 * generates content block outer-most wrapper with responsive css vars
 * type = full | inset | centered
 */
@mixin content-block($type: full) {
  --content-block-padding: #{$spacing-m};
  --content-block-padding-x: #{$content-gutter-sm};

  @include min-md {
    --content-block-padding: #{$content-gutter-md};
    --content-block-padding-x: unset;
  }

  @include min-lg {
    --content-block-padding: #{$content-gutter-lg};
  }

  @if $type ==full or $type ==inset {
    @include min-xxl {
      --content-block-padding-x: #{$content-gutter-xl};
    }
  }

  @if $type ==inset {
    --content-block-margin-x: #{$page-gutter-sm};
    --content-block-width-max: #{$content-inset-max-width};

    @include min-md {
      --content-block-margin-x: #{$page-gutter-md};
    }

    @media only screen and (min-width: 1078px) {
      --content-block-margin-x: auto;
    }
  }

  @if $type ==centered {
    align-items: center;
    display: flex;
    justify-content: center;
    text-align: center;

    @include min-md {
      --content-block-width-max: #{$screen-md};
    }

    @include min-lg {
      --content-block-padding: #{$content-gutter-md};
    }
  }
}

/**
 * generates layout for the child element of a content block from the vars set above
 */
@mixin content-block-container {
  @include mx(var(--content-block-margin-x));

  max-width: var(--content-block-width-max);
}

/**
 * generates typical layout for text content area inside a content block from the vars set above
 */
@mixin content-block-inner {
  @include px(var(--content-block-padding-x, var(--content-block-padding)));
  @include py(var(--content-block-padding));
}

@mixin content-block-responsive-image {
  img {
    display: block;
    height: 100%;
    object-position: center;
    object-fit: cover;
    width: 100%;
  }

  @include min-lg {
    position: relative;
    height: auto;

    img {
      position: absolute;
    }
  }
}

@mixin createModifiers($obj) {
  @each $key, $list in $obj {
    @if is-list($list) {
      @each $v in $list {
        &__#{$v} {
          #{$v}: $key;
        }
      }
    }

    @each $name, $value in $list {
      &__#{$name} {
        #{$key}: $value;
      }
    }
  }
}
